On computer, rearrange counts.tsv file to countstable_endoRIP.txt followed by copying it to thinlinc
#Copy experiment_endoRIP.txt from desktop to server

scp *.txt primukh@carbonate.uits.iu.edu:/N/slate/primukh/endoRIP_Redo/. 

library(DESeq2)
library("gplots")
library("RColorBrewer")
library("genefilter")
library("IHW")
library("pheatmap")
library("ggplot2")

countsTable <- read.table("/N/slate/primukh/endoRIP_Redo/counts_endoRIP.txt", header = TRUE, row.names = 1)

View(countsTable)
colnames(countsTable)

#to view row names
row_names <- rownames(countsTable)
print(row_names)

experimentData <- read.table("/N/slate/primukh/endoRIP_Redo/experiment_endoRIP.txt", header=TRUE)
rownames(experimentData) <- experimentData$sample

dds <- DESeqDataSetFromMatrix(countData = countsTable, colData = experimentData, design = ~ assay + condition + condition:replicate + condition:assay)
#Error in checkFullRank(modelMatrix): 
  #the model matrix is not full rank, so the model cannot be fit as specified.
  #One or more variables or interaction terms in the design formula are linear
  #combinations of the others and must be removed.
  #Please read the vignette section 'Model matrix not full rank':
  #vignette('DESeq2')
#So duplicated the input columns twice and renamed them ADAR3_Input_Rep and PreImmune_Input_Rep

dds <- DESeqDataSetFromMatrix(countData = countsTable, colData = experimentData, design = ~ assay + condition + condition:replicate + condition:assay)

#The first level would be considered denominator. Hence the default fold change was defined as Ctrl / ADAR3. 
#This can be fixed by redefining the order of the levels as below, bringing Ctrl as the top level.

dds$condition <- factor(dds$condition, levels=c("Ctrl","ADAR3"))  
dds <- DESeq(dds, test="LRT", reduced = ~ 1)

res_LRT <- results(dds, test="LRT")

length(which(res_LRT$padj <= 0.05)) 
#this allows to select for genes that have padj lower than 0.05 and prints the number on R. 4104

write.table(res_LRT, file="/N/slate/primukh/endoRIP_Redo/DESeq2_LRT_Results_endoRIP_07.24.23.tsv", quote=FALSE, sep="\t", na="NA", col.names=NA)

normcounts <- counts(dds, normalized=T)

write.table(normcounts, file="/N/slate/primukh/endoRIP_Redo/normalized_countstable_endoRIP.txt", quote=FALSE, sep="\t", col.names=NA)

sizefactors <- sizeFactors(dds)

write.table(sizefactors, file="/N/slate/primukh/endoRIP_Redo/SizeFactors_endoRIP_07.24.23.txt", quote=FALSE, sep="\t", col.names=NA)

plotPCA_ram <- function(object, intgroup = "condition", ntop = 500, returnData = FALSE) {
 rv <- rowVars(assay(object))
 select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
 pca <- prcomp(t(assay(object)[select, ]))
 percentVar <- pca$sdev^2/sum(pca$sdev^2)
 
write.table(percentVar, file="/N/slate/primukh/endoRIP_Redo/explained_variance.txt", quote=FALSE, sep="\t", col.names=NA)
 if (!all(intgroup %in% names(colData(object)))) {
             stop("the argument 'intgroup' should specify columns of colData(dds)")
         }
 intgroup.df <- as.data.frame(colData(object)[, intgroup,
             drop = FALSE])
         group <- if (length(intgroup) > 1) {
             factor(apply(intgroup.df, 1, paste, collapse = ":"))
         }
         else {
             colData(object)[[intgroup]]
         }
         d <- data.frame(PC2 = pca$x[, 2], PC3 = pca$x[, 3], group = group,
             intgroup.df, name = colnames(object))
         if (returnData) {
             attr(d, "percentVar") <- percentVar[2:3]
             return(d)
         }
ggplot(data = d, aes_string(x = "PC2", y = "PC3", color = "group")) +
             geom_point(size = 3) + xlab(paste0("PC2: ", round(percentVar[2] *
             100), "% variance")) + ylab(paste0("PC3: ", round(percentVar[3] *
             100), "% variance")) + coord_fixed()
     }

pdf("/N/slate/primukh/endoRIP_Redo/DESeq2_LRT_Results_endoRIP_07.24.23.pdf")
        pcaData<-plotPCA(rld)
        print(pcaData)
pcaData_ram <- plotPCA_ram(rld)
print(pcaData_ram)
rlogMat <- assay(rld)
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
sampleDists <- dist( t( rlogMat ) )
        sampleDistMatrix <- as.matrix( sampleDists )
        rownames(sampleDistMatrix) <- rld$sample
        colnames(sampleDistMatrix) <- rld$sample
heatmap.2( sampleDistMatrix, trace="none", col=colours, cexRow=1, cexCol=1,margins=c(12,8), srtCol=45)
dev.off()

write.table(sampleDistMatrix, file=paste("/N/slate/primukh/endoRIP_Redo/distance_matrix.txt", sep = ""), quote=FALSE, sep="\t", col.names=NA)
write.table(rlogMat, file=paste("/N/slate/primukh/endoRIP_Redo/regularized_log.txt", sep = ""), quote=FALSE, sep="\t", col.names=NA)
write.table(pcaData$data, file=paste("/N/slate/primukh/endoRIP_Redo/loadings.txt", sep = ""), quote=FALSE, sep="\t", col.names=NA)
write.table(pcaData_ram$data, file=paste("/N/slate/primukh/endoRIP_Redo/loadings_PC2_PC3.txt", sep = ""), quote=FALSE, sep="\t", col.names=NA)
write(pcaData$labels$x, stderr())
write(pcaData$labels$y, stderr())
save.image(paste("/N/slate/primukh/endoRIP_Redo/DE_session.RData", sep=""))


  
